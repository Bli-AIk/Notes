@startuml
namespace Avalonia.Markup.Xaml {
    class AvaloniaRuntimeXamlLoader {
        + Load1(xaml: string, localAssembly: Assembly, rootInstance: object, uri: Uri, designMode: bool)
        + Load2(stream: Stream, localAssembly: Assembly, rootInstance: object, uri: Uri, designMode: bool)
        + Load3(document: RuntimeXamlLoaderDocument, configuration: RuntimeXamlLoaderConfiguration)
    }

    class RuntimeXamlLoaderDocument {
        + BaseUri: Uri?
        + RootInstance: object?
        + XamlStream: Stream
        + ServiceProvider: IServiceProvider?
    }

    class RuntimeXamlLoaderConfiguration {
        + LocalAssembly: Assembly?
        + UseCompiledBindingsByDefault: bool = false
        + DesignMode: bool = false
        + DiagnosticHandler: XamlDiagnosticFunc?
    }

    delegate void XamlDiagnosticFunc(int line, int position, string message)

    AvaloniaRuntimeXamlLoader ..> RuntimeXamlLoaderDocument
    AvaloniaRuntimeXamlLoader ..> RuntimeXamlLoaderConfiguration
    RuntimeXamlLoaderConfiguration ..> XamlDiagnosticFunc
}

' 建立伪节点代表方法
entity Load1
entity Load2
entity Load3

' 隐藏连线，把伪节点放到类方法对应的位置
Avalonia.Markup.Xaml.AvaloniaRuntimeXamlLoader::Load1 -[hidden]- Load1
Avalonia.Markup.Xaml.AvaloniaRuntimeXamlLoader::Load2 -[hidden]- Load2
Avalonia.Markup.Xaml.AvaloniaRuntimeXamlLoader::Load3 -[hidden]- Load3

' 实际箭头
Load1 --> Load2 : 调用
Load2 --> Load3 : 调用

note right of Load1
  var stream = new MemoryStream(Encoding.UTF8.GetBytes(xaml));
end note

note right of Load2
  new RuntimeXamlLoaderDocument(uri, rootInstance, stream)
  new RuntimeXamlLoaderConfiguration { DesignMode = designMode, LocalAssembly = localAssembly }
end note

note right of AvaloniaRuntimeXamlLoader
  Load方法重载都包含RequiresUnreferencedCode,
  其提示信息为:
  XamlX.TrimmingMessages.DynamicXamlReference =
  "x:Class directive type and XAML dependencies are referenced dynamically and might be trimmed."
end note

note as N1
  RequiresUnreferencedCode 是 .NET（尤其是 .NET 5+ 和 .NET 6/7/8）中的一个 特性（attribute），
  用于标记某些方法或成员 在链接器（IL Linker / Trim）裁剪代码时不安全，
  也就是说，这些代码 依赖于反射或动态访问，裁剪时可能被移除，导致运行时错误。
end note

package Avalonia.Markup.Xaml.XamlIl {
}

Avalonia.Markup.Xaml.AvaloniaRuntimeXamlLoader ..> Avalonia.Markup.Xaml.XamlIl : using
@enduml